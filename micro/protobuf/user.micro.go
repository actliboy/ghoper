// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	GetReq
	SignupReq
	LoginReq
	LoginRep
	LogoutReq
	LogoutRep
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = google_protobuf.Timestamp{}

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Timestamp from public import google/protobuf/timestamp.proto

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for UserService service

type UserService interface {
	Signup(ctx context.Context, in *SignupReq, opts ...client.CallOption) (*LoginRep, error)
	Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRep, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutRep, error)
	GetUser(ctx context.Context, in *GetReq, opts ...client.CallOption) (*User, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "protobuf"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Signup(ctx context.Context, in *SignupReq, opts ...client.CallOption) (*LoginRep, error) {
	req := c.c.NewRequest(c.name, "UserService.Signup", in)
	out := new(LoginRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Login(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*LoginRep, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(LoginRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Logout(ctx context.Context, in *LogoutReq, opts ...client.CallOption) (*LogoutRep, error) {
	req := c.c.NewRequest(c.name, "UserService.Logout", in)
	out := new(LogoutRep)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUser(ctx context.Context, in *GetReq, opts ...client.CallOption) (*User, error) {
	req := c.c.NewRequest(c.name, "UserService.GetUser", in)
	out := new(User)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Signup(context.Context, *SignupReq, *LoginRep) error
	Login(context.Context, *LoginReq, *LoginRep) error
	Logout(context.Context, *LogoutReq, *LogoutRep) error
	GetUser(context.Context, *GetReq, *User) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Signup(ctx context.Context, in *SignupReq, out *LoginRep) error
		Login(ctx context.Context, in *LoginReq, out *LoginRep) error
		Logout(ctx context.Context, in *LogoutReq, out *LogoutRep) error
		GetUser(ctx context.Context, in *GetReq, out *User) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Signup(ctx context.Context, in *SignupReq, out *LoginRep) error {
	return h.UserServiceHandler.Signup(ctx, in, out)
}

func (h *userServiceHandler) Login(ctx context.Context, in *LoginReq, out *LoginRep) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) Logout(ctx context.Context, in *LogoutReq, out *LogoutRep) error {
	return h.UserServiceHandler.Logout(ctx, in, out)
}

func (h *userServiceHandler) GetUser(ctx context.Context, in *GetReq, out *User) error {
	return h.UserServiceHandler.GetUser(ctx, in, out)
}
