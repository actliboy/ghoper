// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: article.proto

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	article.proto

It has these top-level messages:
	HelloRequest
	HelloReply
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Greeter service

type GreeterService interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error)
	// Sends another greeting
	SayHelloAgain(ctx context.Context, opts ...client.CallOption) (Greeter_SayHelloAgainService, error)
}

type greeterService struct {
	c    client.Client
	name string
}

func NewGreeterService(name string, c client.Client) GreeterService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "protobuf"
	}
	return &greeterService{
		c:    c,
		name: name,
	}
}

func (c *greeterService) SayHello(ctx context.Context, in *HelloRequest, opts ...client.CallOption) (*HelloReply, error) {
	req := c.c.NewRequest(c.name, "Greeter.SayHello", in)
	out := new(HelloReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterService) SayHelloAgain(ctx context.Context, opts ...client.CallOption) (Greeter_SayHelloAgainService, error) {
	req := c.c.NewRequest(c.name, "Greeter.SayHelloAgain", &HelloRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &greeterServiceSayHelloAgain{stream}, nil
}

type Greeter_SayHelloAgainService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
}

type greeterServiceSayHelloAgain struct {
	stream client.Stream
}

func (x *greeterServiceSayHelloAgain) Close() error {
	return x.stream.Close()
}

func (x *greeterServiceSayHelloAgain) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterServiceSayHelloAgain) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterServiceSayHelloAgain) Send(m *HelloRequest) error {
	return x.stream.Send(m)
}

func (x *greeterServiceSayHelloAgain) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterHandler interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest, *HelloReply) error
	// Sends another greeting
	SayHelloAgain(context.Context, Greeter_SayHelloAgainStream) error
}

func RegisterGreeterHandler(s server.Server, hdlr GreeterHandler, opts ...server.HandlerOption) error {
	type greeter interface {
		SayHello(ctx context.Context, in *HelloRequest, out *HelloReply) error
		SayHelloAgain(ctx context.Context, stream server.Stream) error
	}
	type Greeter struct {
		greeter
	}
	h := &greeterHandler{hdlr}
	return s.Handle(s.NewHandler(&Greeter{h}, opts...))
}

type greeterHandler struct {
	GreeterHandler
}

func (h *greeterHandler) SayHello(ctx context.Context, in *HelloRequest, out *HelloReply) error {
	return h.GreeterHandler.SayHello(ctx, in, out)
}

func (h *greeterHandler) SayHelloAgain(ctx context.Context, stream server.Stream) error {
	return h.GreeterHandler.SayHelloAgain(ctx, &greeterSayHelloAgainStream{stream})
}

type Greeter_SayHelloAgainStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
}

type greeterSayHelloAgainStream struct {
	stream server.Stream
}

func (x *greeterSayHelloAgainStream) Close() error {
	return x.stream.Close()
}

func (x *greeterSayHelloAgainStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *greeterSayHelloAgainStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *greeterSayHelloAgainStream) Send(m *HelloReply) error {
	return x.stream.Send(m)
}

func (x *greeterSayHelloAgainStream) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
